
RTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002508  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080026a8  080026a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f8  080026f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002700  08002700  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d78  20000010  08002718  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012d88  08002718  00022d88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c569  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d20  00000000  00000000  0002c5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd8  00000000  00000000  0002e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002eea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000161c8  00000000  00000000  0002f998  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b99  00000000  00000000  00045b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090cce  00000000  00000000  0004e6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df3c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003080  00000000  00000000  000df444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002690 	.word	0x08002690

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08002690 	.word	0x08002690

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 f9b1 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f83f 	bl	800056c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
    ret = xTaskCreate(task1_handler,"Task-1", 200, "Task-1 Hello World", 2, &task1_handle);
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	2302      	movs	r3, #2
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <main+0x74>)
 80004fa:	22c8      	movs	r2, #200	; 0xc8
 80004fc:	4916      	ldr	r1, [pc, #88]	; (8000558 <main+0x78>)
 80004fe:	4817      	ldr	r0, [pc, #92]	; (800055c <main+0x7c>)
 8000500:	f001 f96d 	bl	80017de <xTaskCreate>
 8000504:	6178      	str	r0, [r7, #20]
    configASSERT(ret == pdPASS);
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d009      	beq.n	8000520 <main+0x40>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000510:	f383 8811 	msr	BASEPRI, r3
 8000514:	f3bf 8f6f 	isb	sy
 8000518:	f3bf 8f4f 	dsb	sy
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	e7fe      	b.n	800051e <main+0x3e>

    ret = xTaskCreate(task2_handler,"Task-2", 200, "Task-2 Hello World", 2, &task2_handle);
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	2302      	movs	r3, #2
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <main+0x80>)
 800052a:	22c8      	movs	r2, #200	; 0xc8
 800052c:	490d      	ldr	r1, [pc, #52]	; (8000564 <main+0x84>)
 800052e:	480e      	ldr	r0, [pc, #56]	; (8000568 <main+0x88>)
 8000530:	f001 f955 	bl	80017de <xTaskCreate>
 8000534:	6178      	str	r0, [r7, #20]
    configASSERT(ret == pdPASS);
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d009      	beq.n	8000550 <main+0x70>
 800053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000540:	f383 8811 	msr	BASEPRI, r3
 8000544:	f3bf 8f6f 	isb	sy
 8000548:	f3bf 8f4f 	dsb	sy
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e7fe      	b.n	800054e <main+0x6e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x70>
 8000552:	bf00      	nop
 8000554:	080026a8 	.word	0x080026a8
 8000558:	080026bc 	.word	0x080026bc
 800055c:	08000629 	.word	0x08000629
 8000560:	080026c4 	.word	0x080026c4
 8000564:	080026d8 	.word	0x080026d8
 8000568:	0800063d 	.word	0x0800063d

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f002 f880 	bl	8002680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xb4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xb4>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xb4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <SystemClock_Config+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <SystemClock_Config+0xb8>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <SystemClock_Config+0xb8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fa59 	bl	8000a94 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005e8:	f000 f844 	bl	8000674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fcb4 	bl	8000f74 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000612:	f000 f82f 	bl	8000674 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameter)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    return;
 8000630:	bf00      	nop
}
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <task2_handler>:

static void task2_handler(void * parameter)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    return;
 8000644:	bf00      	nop
}
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d101      	bne.n	8000666 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000662:	f000 f915 	bl	8000890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40000c00 	.word	0x40000c00

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <HAL_MspInit+0x4c>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <HAL_MspInit+0x4c>)
 8000694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000698:	6453      	str	r3, [r2, #68]	; 0x44
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <HAL_MspInit+0x4c>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_MspInit+0x4c>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <HAL_MspInit+0x4c>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_MspInit+0x4c>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800

080006d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	2032      	movs	r0, #50	; 0x32
 80006ea:	f000 f9a9 	bl	8000a40 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80006ee:	2032      	movs	r0, #50	; 0x32
 80006f0:	f000 f9c2 	bl	8000a78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <HAL_InitTick+0xa0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <HAL_InitTick+0xa0>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_InitTick+0xa0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000710:	f107 0210 	add.w	r2, r7, #16
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fde2 	bl	80012e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000720:	f000 fdcc 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
 8000724:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000728:	4a13      	ldr	r2, [pc, #76]	; (8000778 <HAL_InitTick+0xa4>)
 800072a:	fba2 2303 	umull	r2, r3, r2, r3
 800072e:	0c9b      	lsrs	r3, r3, #18
 8000730:	3b01      	subs	r3, #1
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <HAL_InitTick+0xa8>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <HAL_InitTick+0xac>)
 8000738:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_InitTick+0xa8>)
 800073c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000740:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <HAL_InitTick+0xa8>)
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_InitTick+0xa8>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <HAL_InitTick+0xa8>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <HAL_InitTick+0xa8>)
 8000756:	f000 fdf7 	bl	8001348 <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d104      	bne.n	800076a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <HAL_InitTick+0xa8>)
 8000762:	f000 fe26 	bl	80013b2 <HAL_TIM_Base_Start_IT>
 8000766:	4603      	mov	r3, r0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3730      	adds	r7, #48	; 0x30
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	431bde83 	.word	0x431bde83
 800077c:	20012d44 	.word	0x20012d44
 8000780:	40000c00 	.word	0x40000c00

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <TIM5_IRQHandler+0x10>)
 80007be:	f000 fe1c 	bl	80013fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20012d44 	.word	0x20012d44

080007cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <SystemInit+0x28>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <SystemInit+0x28>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <SystemInit+0x28>)
 80007e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e6:	609a      	str	r2, [r3, #8]
#endif
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000830 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007fe:	e003      	b.n	8000808 <LoopCopyDataInit>

08000800 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000802:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000804:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000806:	3104      	adds	r1, #4

08000808 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800080c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800080e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000810:	d3f6      	bcc.n	8000800 <CopyDataInit>
  ldr  r2, =_sbss
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000814:	e002      	b.n	800081c <LoopFillZerobss>

08000816 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000816:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000818:	f842 3b04 	str.w	r3, [r2], #4

0800081c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800081e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000820:	d3f9      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000822:	f7ff ffd3 	bl	80007cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000826:	f001 ff07 	bl	8002638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082a:	f7ff fe59 	bl	80004e0 <main>
  bx  lr    
 800082e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000830:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000834:	08002708 	.word	0x08002708
  ldr  r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800083c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000840:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000844:	20012d88 	.word	0x20012d88

08000848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <HAL_Init+0x40>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800085a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0a      	ldr	r2, [pc, #40]	; (800088c <HAL_Init+0x40>)
 8000862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_Init+0x40>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_Init+0x40>)
 800086e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f8d8 	bl	8000a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff ff2a 	bl	80006d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff ff00 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023c00 	.word	0x40023c00

08000890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x20>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_IncTick+0x24>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_IncTick+0x24>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20012d84 	.word	0x20012d84

080008b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return uwTick;
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <HAL_GetTick+0x14>)
 80008be:	681b      	ldr	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20012d84 	.word	0x20012d84

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff4c 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a52:	f7ff ff61 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	68b9      	ldr	r1, [r7, #8]
 8000a5c:	6978      	ldr	r0, [r7, #20]
 8000a5e:	f7ff ffb1 	bl	80009c4 <NVIC_EncodePriority>
 8000a62:	4602      	mov	r2, r0
 8000a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff80 	bl	8000970 <__NVIC_SetPriority>
}
 8000a70:	bf00      	nop
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff54 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e25b      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d075      	beq.n	8000b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ab2:	4ba3      	ldr	r3, [pc, #652]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f003 030c 	and.w	r3, r3, #12
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d00c      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000abe:	4ba0      	ldr	r3, [pc, #640]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	d112      	bne.n	8000af0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000aca:	4b9d      	ldr	r3, [pc, #628]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ad6:	d10b      	bne.n	8000af0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad8:	4b99      	ldr	r3, [pc, #612]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d05b      	beq.n	8000b9c <HAL_RCC_OscConfig+0x108>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d157      	bne.n	8000b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e236      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af8:	d106      	bne.n	8000b08 <HAL_RCC_OscConfig+0x74>
 8000afa:	4b91      	ldr	r3, [pc, #580]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a90      	ldr	r2, [pc, #576]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	e01d      	b.n	8000b44 <HAL_RCC_OscConfig+0xb0>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b10:	d10c      	bne.n	8000b2c <HAL_RCC_OscConfig+0x98>
 8000b12:	4b8b      	ldr	r3, [pc, #556]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a8a      	ldr	r2, [pc, #552]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	4b88      	ldr	r3, [pc, #544]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a87      	ldr	r2, [pc, #540]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	e00b      	b.n	8000b44 <HAL_RCC_OscConfig+0xb0>
 8000b2c:	4b84      	ldr	r3, [pc, #528]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a83      	ldr	r2, [pc, #524]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4b81      	ldr	r3, [pc, #516]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a80      	ldr	r2, [pc, #512]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d013      	beq.n	8000b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b4c:	f7ff feb4 	bl	80008b8 <HAL_GetTick>
 8000b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b52:	e008      	b.n	8000b66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b54:	f7ff feb0 	bl	80008b8 <HAL_GetTick>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	2b64      	cmp	r3, #100	; 0x64
 8000b60:	d901      	bls.n	8000b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b62:	2303      	movs	r3, #3
 8000b64:	e1fb      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b66:	4b76      	ldr	r3, [pc, #472]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0f0      	beq.n	8000b54 <HAL_RCC_OscConfig+0xc0>
 8000b72:	e014      	b.n	8000b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b74:	f7ff fea0 	bl	80008b8 <HAL_GetTick>
 8000b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b7a:	e008      	b.n	8000b8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b7c:	f7ff fe9c 	bl	80008b8 <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	2b64      	cmp	r3, #100	; 0x64
 8000b88:	d901      	bls.n	8000b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e1e7      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b8e:	4b6c      	ldr	r3, [pc, #432]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f0      	bne.n	8000b7c <HAL_RCC_OscConfig+0xe8>
 8000b9a:	e000      	b.n	8000b9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d063      	beq.n	8000c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000baa:	4b65      	ldr	r3, [pc, #404]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f003 030c 	and.w	r3, r3, #12
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00b      	beq.n	8000bce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bb6:	4b62      	ldr	r3, [pc, #392]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d11c      	bne.n	8000bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bc2:	4b5f      	ldr	r3, [pc, #380]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d116      	bne.n	8000bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bce:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d005      	beq.n	8000be6 <HAL_RCC_OscConfig+0x152>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d001      	beq.n	8000be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e1bb      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be6:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	4952      	ldr	r1, [pc, #328]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bfa:	e03a      	b.n	8000c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d020      	beq.n	8000c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c04:	4b4f      	ldr	r3, [pc, #316]	; (8000d44 <HAL_RCC_OscConfig+0x2b0>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c0a:	f7ff fe55 	bl	80008b8 <HAL_GetTick>
 8000c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c10:	e008      	b.n	8000c24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c12:	f7ff fe51 	bl	80008b8 <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d901      	bls.n	8000c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c20:	2303      	movs	r3, #3
 8000c22:	e19c      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c24:	4b46      	ldr	r3, [pc, #280]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f0      	beq.n	8000c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c30:	4b43      	ldr	r3, [pc, #268]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	4940      	ldr	r1, [pc, #256]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	4313      	orrs	r3, r2
 8000c42:	600b      	str	r3, [r1, #0]
 8000c44:	e015      	b.n	8000c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c46:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <HAL_RCC_OscConfig+0x2b0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c4c:	f7ff fe34 	bl	80008b8 <HAL_GetTick>
 8000c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c54:	f7ff fe30 	bl	80008b8 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e17b      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f0      	bne.n	8000c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d030      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d016      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c86:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c8c:	f7ff fe14 	bl	80008b8 <HAL_GetTick>
 8000c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c92:	e008      	b.n	8000ca6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c94:	f7ff fe10 	bl	80008b8 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d901      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e15b      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0f0      	beq.n	8000c94 <HAL_RCC_OscConfig+0x200>
 8000cb2:	e015      	b.n	8000ce0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cba:	f7ff fdfd 	bl	80008b8 <HAL_GetTick>
 8000cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cc0:	e008      	b.n	8000cd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cc2:	f7ff fdf9 	bl	80008b8 <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d901      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e144      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f0      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 80a0 	beq.w	8000e2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10f      	bne.n	8000d1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_RCC_OscConfig+0x2b8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d121      	bne.n	8000d6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_RCC_OscConfig+0x2b8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_RCC_OscConfig+0x2b8>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d36:	f7ff fdbf 	bl	80008b8 <HAL_GetTick>
 8000d3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d3c:	e011      	b.n	8000d62 <HAL_RCC_OscConfig+0x2ce>
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800
 8000d44:	42470000 	.word	0x42470000
 8000d48:	42470e80 	.word	0x42470e80
 8000d4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d50:	f7ff fdb2 	bl	80008b8 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e0fd      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d62:	4b81      	ldr	r3, [pc, #516]	; (8000f68 <HAL_RCC_OscConfig+0x4d4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f0      	beq.n	8000d50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d106      	bne.n	8000d84 <HAL_RCC_OscConfig+0x2f0>
 8000d76:	4b7d      	ldr	r3, [pc, #500]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d7a:	4a7c      	ldr	r2, [pc, #496]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6713      	str	r3, [r2, #112]	; 0x70
 8000d82:	e01c      	b.n	8000dbe <HAL_RCC_OscConfig+0x32a>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2b05      	cmp	r3, #5
 8000d8a:	d10c      	bne.n	8000da6 <HAL_RCC_OscConfig+0x312>
 8000d8c:	4b77      	ldr	r3, [pc, #476]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d90:	4a76      	ldr	r2, [pc, #472]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6713      	str	r3, [r2, #112]	; 0x70
 8000d98:	4b74      	ldr	r3, [pc, #464]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d9c:	4a73      	ldr	r2, [pc, #460]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6713      	str	r3, [r2, #112]	; 0x70
 8000da4:	e00b      	b.n	8000dbe <HAL_RCC_OscConfig+0x32a>
 8000da6:	4b71      	ldr	r3, [pc, #452]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000daa:	4a70      	ldr	r2, [pc, #448]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000dac:	f023 0301 	bic.w	r3, r3, #1
 8000db0:	6713      	str	r3, [r2, #112]	; 0x70
 8000db2:	4b6e      	ldr	r3, [pc, #440]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db6:	4a6d      	ldr	r2, [pc, #436]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000db8:	f023 0304 	bic.w	r3, r3, #4
 8000dbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d015      	beq.n	8000df2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fd77 	bl	80008b8 <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dcc:	e00a      	b.n	8000de4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dce:	f7ff fd73 	bl	80008b8 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e0bc      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de4:	4b61      	ldr	r3, [pc, #388]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0ee      	beq.n	8000dce <HAL_RCC_OscConfig+0x33a>
 8000df0:	e014      	b.n	8000e1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df2:	f7ff fd61 	bl	80008b8 <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000df8:	e00a      	b.n	8000e10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dfa:	f7ff fd5d 	bl	80008b8 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e0a6      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e10:	4b56      	ldr	r3, [pc, #344]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1ee      	bne.n	8000dfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e1c:	7dfb      	ldrb	r3, [r7, #23]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d105      	bne.n	8000e2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e22:	4b52      	ldr	r3, [pc, #328]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a51      	ldr	r2, [pc, #324]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 8092 	beq.w	8000f5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e38:	4b4c      	ldr	r3, [pc, #304]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d05c      	beq.n	8000efe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d141      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e4c:	4b48      	ldr	r3, [pc, #288]	; (8000f70 <HAL_RCC_OscConfig+0x4dc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e52:	f7ff fd31 	bl	80008b8 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e5a:	f7ff fd2d 	bl	80008b8 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e078      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1f0      	bne.n	8000e5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69da      	ldr	r2, [r3, #28]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	431a      	orrs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	019b      	lsls	r3, r3, #6
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	085b      	lsrs	r3, r3, #1
 8000e90:	3b01      	subs	r3, #1
 8000e92:	041b      	lsls	r3, r3, #16
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	061b      	lsls	r3, r3, #24
 8000e9c:	4933      	ldr	r1, [pc, #204]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <HAL_RCC_OscConfig+0x4dc>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fd06 	bl	80008b8 <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb0:	f7ff fd02 	bl	80008b8 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e04d      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f0      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x41c>
 8000ece:	e045      	b.n	8000f5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <HAL_RCC_OscConfig+0x4dc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fcef 	bl	80008b8 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ede:	f7ff fceb 	bl	80008b8 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e036      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f0      	bne.n	8000ede <HAL_RCC_OscConfig+0x44a>
 8000efc:	e02e      	b.n	8000f5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e029      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_RCC_OscConfig+0x4d8>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d11c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d115      	bne.n	8000f58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f32:	4013      	ands	r3, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d10d      	bne.n	8000f58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d106      	bne.n	8000f58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d001      	beq.n	8000f5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40007000 	.word	0x40007000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	42470060 	.word	0x42470060

08000f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e0cc      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f88:	4b68      	ldr	r3, [pc, #416]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d90c      	bls.n	8000fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f96:	4b65      	ldr	r3, [pc, #404]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f9e:	4b63      	ldr	r3, [pc, #396]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0b8      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d020      	beq.n	8000ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fc8:	4b59      	ldr	r3, [pc, #356]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4a58      	ldr	r2, [pc, #352]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fe0:	4b53      	ldr	r3, [pc, #332]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fec:	4b50      	ldr	r3, [pc, #320]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	494d      	ldr	r1, [pc, #308]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d044      	beq.n	8001094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d107      	bne.n	8001022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d119      	bne.n	8001052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e07f      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d003      	beq.n	8001032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800102e:	2b03      	cmp	r3, #3
 8001030:	d107      	bne.n	8001042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e06f      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e067      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001052:	4b37      	ldr	r3, [pc, #220]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f023 0203 	bic.w	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4934      	ldr	r1, [pc, #208]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	4313      	orrs	r3, r2
 8001062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001064:	f7ff fc28 	bl	80008b8 <HAL_GetTick>
 8001068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106a:	e00a      	b.n	8001082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800106c:	f7ff fc24 	bl	80008b8 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	f241 3288 	movw	r2, #5000	; 0x1388
 800107a:	4293      	cmp	r3, r2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e04f      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 020c 	and.w	r2, r3, #12
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	429a      	cmp	r2, r3
 8001092:	d1eb      	bne.n	800106c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d20c      	bcs.n	80010bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d001      	beq.n	80010bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e032      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	4916      	ldr	r1, [pc, #88]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d009      	beq.n	80010fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	490e      	ldr	r1, [pc, #56]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010fa:	f000 f821 	bl	8001140 <HAL_RCC_GetSysClockFreq>
 80010fe:	4601      	mov	r1, r0
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
 800110e:	fa21 f303 	lsr.w	r3, r1, r3
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_RCC_ClockConfig+0x1c8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fada 	bl	80006d4 <HAL_InitTick>

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023c00 	.word	0x40023c00
 8001130:	40023800 	.word	0x40023800
 8001134:	080026e0 	.word	0x080026e0
 8001138:	20000000 	.word	0x20000000
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001156:	4b50      	ldr	r3, [pc, #320]	; (8001298 <HAL_RCC_GetSysClockFreq+0x158>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b04      	cmp	r3, #4
 8001160:	d007      	beq.n	8001172 <HAL_RCC_GetSysClockFreq+0x32>
 8001162:	2b08      	cmp	r3, #8
 8001164:	d008      	beq.n	8001178 <HAL_RCC_GetSysClockFreq+0x38>
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 808d 	bne.w	8001286 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800116c:	4b4b      	ldr	r3, [pc, #300]	; (800129c <HAL_RCC_GetSysClockFreq+0x15c>)
 800116e:	60bb      	str	r3, [r7, #8]
       break;
 8001170:	e08c      	b.n	800128c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001174:	60bb      	str	r3, [r7, #8]
      break;
 8001176:	e089      	b.n	800128c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001178:	4b47      	ldr	r3, [pc, #284]	; (8001298 <HAL_RCC_GetSysClockFreq+0x158>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001180:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001182:	4b45      	ldr	r3, [pc, #276]	; (8001298 <HAL_RCC_GetSysClockFreq+0x158>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d023      	beq.n	80011d6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800118e:	4b42      	ldr	r3, [pc, #264]	; (8001298 <HAL_RCC_GetSysClockFreq+0x158>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	099b      	lsrs	r3, r3, #6
 8001194:	f04f 0400 	mov.w	r4, #0
 8001198:	f240 11ff 	movw	r1, #511	; 0x1ff
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	ea03 0501 	and.w	r5, r3, r1
 80011a4:	ea04 0602 	and.w	r6, r4, r2
 80011a8:	4a3d      	ldr	r2, [pc, #244]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80011aa:	fb02 f106 	mul.w	r1, r2, r6
 80011ae:	2200      	movs	r2, #0
 80011b0:	fb02 f205 	mul.w	r2, r2, r5
 80011b4:	440a      	add	r2, r1
 80011b6:	493a      	ldr	r1, [pc, #232]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80011b8:	fba5 0101 	umull	r0, r1, r5, r1
 80011bc:	1853      	adds	r3, r2, r1
 80011be:	4619      	mov	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f04f 0400 	mov.w	r4, #0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4623      	mov	r3, r4
 80011ca:	f7ff f809 	bl	80001e0 <__aeabi_uldivmod>
 80011ce:	4603      	mov	r3, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e049      	b.n	800126a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d6:	4b30      	ldr	r3, [pc, #192]	; (8001298 <HAL_RCC_GetSysClockFreq+0x158>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	099b      	lsrs	r3, r3, #6
 80011dc:	f04f 0400 	mov.w	r4, #0
 80011e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	ea03 0501 	and.w	r5, r3, r1
 80011ec:	ea04 0602 	and.w	r6, r4, r2
 80011f0:	4629      	mov	r1, r5
 80011f2:	4632      	mov	r2, r6
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	f04f 0400 	mov.w	r4, #0
 80011fc:	0154      	lsls	r4, r2, #5
 80011fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001202:	014b      	lsls	r3, r1, #5
 8001204:	4619      	mov	r1, r3
 8001206:	4622      	mov	r2, r4
 8001208:	1b49      	subs	r1, r1, r5
 800120a:	eb62 0206 	sbc.w	r2, r2, r6
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	f04f 0400 	mov.w	r4, #0
 8001216:	0194      	lsls	r4, r2, #6
 8001218:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800121c:	018b      	lsls	r3, r1, #6
 800121e:	1a5b      	subs	r3, r3, r1
 8001220:	eb64 0402 	sbc.w	r4, r4, r2
 8001224:	f04f 0100 	mov.w	r1, #0
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	00e2      	lsls	r2, r4, #3
 800122e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001232:	00d9      	lsls	r1, r3, #3
 8001234:	460b      	mov	r3, r1
 8001236:	4614      	mov	r4, r2
 8001238:	195b      	adds	r3, r3, r5
 800123a:	eb44 0406 	adc.w	r4, r4, r6
 800123e:	f04f 0100 	mov.w	r1, #0
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	02a2      	lsls	r2, r4, #10
 8001248:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800124c:	0299      	lsls	r1, r3, #10
 800124e:	460b      	mov	r3, r1
 8001250:	4614      	mov	r4, r2
 8001252:	4618      	mov	r0, r3
 8001254:	4621      	mov	r1, r4
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f04f 0400 	mov.w	r4, #0
 800125c:	461a      	mov	r2, r3
 800125e:	4623      	mov	r3, r4
 8001260:	f7fe ffbe 	bl	80001e0 <__aeabi_uldivmod>
 8001264:	4603      	mov	r3, r0
 8001266:	460c      	mov	r4, r1
 8001268:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_RCC_GetSysClockFreq+0x158>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	0c1b      	lsrs	r3, r3, #16
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	3301      	adds	r3, #1
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	60bb      	str	r3, [r7, #8]
      break;
 8001284:	e002      	b.n	800128c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001288:	60bb      	str	r3, [r7, #8]
      break;
 800128a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800128c:	68bb      	ldr	r3, [r7, #8]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	00f42400 	.word	0x00f42400
 80012a0:	017d7840 	.word	0x017d7840

080012a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000000 	.word	0x20000000

080012bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012c0:	f7ff fff0 	bl	80012a4 <HAL_RCC_GetHCLKFreq>
 80012c4:	4601      	mov	r1, r0
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	0a9b      	lsrs	r3, r3, #10
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012d8:	4618      	mov	r0, r3
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	080026f0 	.word	0x080026f0

080012e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	220f      	movs	r2, #15
 80012f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <HAL_RCC_GetClockConfig+0x60>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 020f 	and.w	r2, r3, #15
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	601a      	str	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e01d      	b.n	8001396 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d106      	bne.n	8001374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f815 	bl	800139e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2202      	movs	r2, #2
 8001378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3304      	adds	r3, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f000 f968 	bl	800165c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0201 	orr.w	r2, r2, #1
 80013c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b06      	cmp	r3, #6
 80013da:	d007      	beq.n	80013ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b02      	cmp	r3, #2
 800140e:	d122      	bne.n	8001456 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b02      	cmp	r3, #2
 800141c:	d11b      	bne.n	8001456 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f06f 0202 	mvn.w	r2, #2
 8001426:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f8ee 	bl	800161e <HAL_TIM_IC_CaptureCallback>
 8001442:	e005      	b.n	8001450 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f8e0 	bl	800160a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f8f1 	bl	8001632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b04      	cmp	r3, #4
 8001462:	d122      	bne.n	80014aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b04      	cmp	r3, #4
 8001470:	d11b      	bne.n	80014aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f06f 0204 	mvn.w	r2, #4
 800147a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2202      	movs	r2, #2
 8001480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f8c4 	bl	800161e <HAL_TIM_IC_CaptureCallback>
 8001496:	e005      	b.n	80014a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8b6 	bl	800160a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f8c7 	bl	8001632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d122      	bne.n	80014fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d11b      	bne.n	80014fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f06f 0208 	mvn.w	r2, #8
 80014ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2204      	movs	r2, #4
 80014d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f89a 	bl	800161e <HAL_TIM_IC_CaptureCallback>
 80014ea:	e005      	b.n	80014f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f88c 	bl	800160a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f89d 	bl	8001632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b10      	cmp	r3, #16
 800150a:	d122      	bne.n	8001552 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b10      	cmp	r3, #16
 8001518:	d11b      	bne.n	8001552 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f06f 0210 	mvn.w	r2, #16
 8001522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2208      	movs	r2, #8
 8001528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f870 	bl	800161e <HAL_TIM_IC_CaptureCallback>
 800153e:	e005      	b.n	800154c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f862 	bl	800160a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f873 	bl	8001632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d10e      	bne.n	800157e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f06f 0201 	mvn.w	r2, #1
 8001576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff f869 	bl	8000650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001588:	2b80      	cmp	r3, #128	; 0x80
 800158a:	d10e      	bne.n	80015aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001596:	2b80      	cmp	r3, #128	; 0x80
 8001598:	d107      	bne.n	80015aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80015a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f8e3 	bl	8001770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b4:	2b40      	cmp	r3, #64	; 0x40
 80015b6:	d10e      	bne.n	80015d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c2:	2b40      	cmp	r3, #64	; 0x40
 80015c4:	d107      	bne.n	80015d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f838 	bl	8001646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	f003 0320 	and.w	r3, r3, #32
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	d10e      	bne.n	8001602 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d107      	bne.n	8001602 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f06f 0220 	mvn.w	r2, #32
 80015fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f8ad 	bl	800175c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a34      	ldr	r2, [pc, #208]	; (8001740 <TIM_Base_SetConfig+0xe4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00f      	beq.n	8001694 <TIM_Base_SetConfig+0x38>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167a:	d00b      	beq.n	8001694 <TIM_Base_SetConfig+0x38>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a31      	ldr	r2, [pc, #196]	; (8001744 <TIM_Base_SetConfig+0xe8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d007      	beq.n	8001694 <TIM_Base_SetConfig+0x38>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a30      	ldr	r2, [pc, #192]	; (8001748 <TIM_Base_SetConfig+0xec>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d003      	beq.n	8001694 <TIM_Base_SetConfig+0x38>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a2f      	ldr	r2, [pc, #188]	; (800174c <TIM_Base_SetConfig+0xf0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d108      	bne.n	80016a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800169a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a25      	ldr	r2, [pc, #148]	; (8001740 <TIM_Base_SetConfig+0xe4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01b      	beq.n	80016e6 <TIM_Base_SetConfig+0x8a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b4:	d017      	beq.n	80016e6 <TIM_Base_SetConfig+0x8a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <TIM_Base_SetConfig+0xe8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <TIM_Base_SetConfig+0x8a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a21      	ldr	r2, [pc, #132]	; (8001748 <TIM_Base_SetConfig+0xec>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00f      	beq.n	80016e6 <TIM_Base_SetConfig+0x8a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a20      	ldr	r2, [pc, #128]	; (800174c <TIM_Base_SetConfig+0xf0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00b      	beq.n	80016e6 <TIM_Base_SetConfig+0x8a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <TIM_Base_SetConfig+0xf4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <TIM_Base_SetConfig+0x8a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a1e      	ldr	r2, [pc, #120]	; (8001754 <TIM_Base_SetConfig+0xf8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d003      	beq.n	80016e6 <TIM_Base_SetConfig+0x8a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <TIM_Base_SetConfig+0xfc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d108      	bne.n	80016f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <TIM_Base_SetConfig+0xe4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d103      	bne.n	800172c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	615a      	str	r2, [r3, #20]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40010000 	.word	0x40010000
 8001744:	40000400 	.word	0x40000400
 8001748:	40000800 	.word	0x40000800
 800174c:	40000c00 	.word	0x40000c00
 8001750:	40014000 	.word	0x40014000
 8001754:	40014400 	.word	0x40014400
 8001758:	40014800 	.word	0x40014800

0800175c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f103 0208 	add.w	r2, r3, #8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f103 0208 	add.w	r2, r3, #8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f103 0208 	add.w	r2, r3, #8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80017de:	b580      	push	{r7, lr}
 80017e0:	b08c      	sub	sp, #48	; 0x30
 80017e2:	af04      	add	r7, sp, #16
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fd58 	bl	80022a8 <pvPortMalloc>
 80017f8:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001800:	2058      	movs	r0, #88	; 0x58
 8001802:	f000 fd51 	bl	80022a8 <pvPortMalloc>
 8001806:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800180e:	2258      	movs	r2, #88	; 0x58
 8001810:	2100      	movs	r1, #0
 8001812:	69f8      	ldr	r0, [r7, #28]
 8001814:	f000 ff34 	bl	8002680 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
 800181e:	e005      	b.n	800182c <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001820:	6978      	ldr	r0, [r7, #20]
 8001822:	f000 fdf9 	bl	8002418 <vPortFree>
 8001826:	e001      	b.n	800182c <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d013      	beq.n	800185a <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001832:	88fa      	ldrh	r2, [r7, #6]
 8001834:	2300      	movs	r3, #0
 8001836:	9303      	str	r3, [sp, #12]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f80e 	bl	800186a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800184e:	69f8      	ldr	r0, [r7, #28]
 8001850:	f000 f898 	bl	8001984 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001854:	2301      	movs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	e002      	b.n	8001860 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001860:	69bb      	ldr	r3, [r7, #24]
    }
 8001862:	4618      	mov	r0, r3
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b088      	sub	sp, #32
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	461a      	mov	r2, r3
 8001882:	21a5      	movs	r1, #165	; 0xa5
 8001884:	f000 fefc 	bl	8002680 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001892:	3b01      	subs	r3, #1
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	f023 0307 	bic.w	r3, r3, #7
 80018a0:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <prvInitialiseNewTask+0x56>
 80018ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b0:	f383 8811 	msr	BASEPRI, r3
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e7fe      	b.n	80018be <prvInitialiseNewTask+0x54>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01e      	beq.n	8001904 <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e012      	b.n	80018f2 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	7819      	ldrb	r1, [r3, #0]
 80018d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	3334      	adds	r3, #52	; 0x34
 80018dc:	460a      	mov	r2, r1
 80018de:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3301      	adds	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	d9e9      	bls.n	80018cc <prvInitialiseNewTask+0x62>
 80018f8:	e000      	b.n	80018fc <prvInitialiseNewTask+0x92>
            {
                break;
 80018fa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80018fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	2b04      	cmp	r3, #4
 8001908:	d909      	bls.n	800191e <prvInitialiseNewTask+0xb4>
 800190a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190e:	f383 8811 	msr	BASEPRI, r3
 8001912:	f3bf 8f6f 	isb	sy
 8001916:	f3bf 8f4f 	dsb	sy
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	e7fe      	b.n	800191c <prvInitialiseNewTask+0xb2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	2b04      	cmp	r3, #4
 8001922:	d901      	bls.n	8001928 <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001924:	2304      	movs	r3, #4
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001932:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001936:	3304      	adds	r3, #4
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff43 	bl	80017c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001940:	3318      	adds	r3, #24
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff3e 	bl	80017c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800194c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001950:	f1c3 0205 	rsb	r2, r3, #5
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	69b8      	ldr	r0, [r7, #24]
 8001964:	f000 fb78 	bl	8002058 <pxPortInitialiseStack>
 8001968:	4602      	mov	r2, r0
 800196a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001978:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800197a:	bf00      	nop
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800198c:	f000 fbdc 	bl	8002148 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001990:	4b40      	ldr	r3, [pc, #256]	; (8001a94 <prvAddNewTaskToReadyList+0x110>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a3f      	ldr	r2, [pc, #252]	; (8001a94 <prvAddNewTaskToReadyList+0x110>)
 8001998:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <prvAddNewTaskToReadyList+0x114>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80019a2:	4a3d      	ldr	r2, [pc, #244]	; (8001a98 <prvAddNewTaskToReadyList+0x114>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019a8:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <prvAddNewTaskToReadyList+0x110>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d110      	bne.n	80019d2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80019b0:	f000 faf6 	bl	8001fa0 <prvInitialiseTaskLists>
 80019b4:	e00d      	b.n	80019d2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80019b6:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <prvAddNewTaskToReadyList+0x118>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80019be:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <prvAddNewTaskToReadyList+0x114>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d802      	bhi.n	80019d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80019cc:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <prvAddNewTaskToReadyList+0x114>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <prvAddNewTaskToReadyList+0x11c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	4a31      	ldr	r2, [pc, #196]	; (8001aa0 <prvAddNewTaskToReadyList+0x11c>)
 80019da:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <prvAddNewTaskToReadyList+0x11c>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	2201      	movs	r2, #1
 80019ea:	409a      	lsls	r2, r3
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <prvAddNewTaskToReadyList+0x120>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	4a2c      	ldr	r2, [pc, #176]	; (8001aa4 <prvAddNewTaskToReadyList+0x120>)
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fa:	492b      	ldr	r1, [pc, #172]	; (8001aa8 <prvAddNewTaskToReadyList+0x124>)
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3304      	adds	r3, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	3204      	adds	r2, #4
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	1d1a      	adds	r2, r3, #4
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <prvAddNewTaskToReadyList+0x124>)
 8001a3a:	441a      	add	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a44:	4918      	ldr	r1, [pc, #96]	; (8001aa8 <prvAddNewTaskToReadyList+0x124>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	1c59      	adds	r1, r3, #1
 8001a54:	4814      	ldr	r0, [pc, #80]	; (8001aa8 <prvAddNewTaskToReadyList+0x124>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4403      	add	r3, r0
 8001a60:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001a62:	f000 fb9f 	bl	80021a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <prvAddNewTaskToReadyList+0x118>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00e      	beq.n	8001a8c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <prvAddNewTaskToReadyList+0x114>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <prvAddNewTaskToReadyList+0x128>)
 8001a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000100 	.word	0x20000100
 8001a98:	2000002c 	.word	0x2000002c
 8001a9c:	2000010c 	.word	0x2000010c
 8001aa0:	2000011c 	.word	0x2000011c
 8001aa4:	20000108 	.word	0x20000108
 8001aa8:	20000030 	.word	0x20000030
 8001aac:	e000ed04 	.word	0xe000ed04

08001ab0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <vTaskSuspendAll+0x18>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <vTaskSuspendAll+0x18>)
 8001abc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	20000124 	.word	0x20000124

08001acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001ada:	4b70      	ldr	r3, [pc, #448]	; (8001c9c <xTaskResumeAll+0x1d0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <xTaskResumeAll+0x2a>
 8001ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae6:	f383 8811 	msr	BASEPRI, r3
 8001aea:	f3bf 8f6f 	isb	sy
 8001aee:	f3bf 8f4f 	dsb	sy
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	e7fe      	b.n	8001af4 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001af6:	f000 fb27 	bl	8002148 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001afa:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <xTaskResumeAll+0x1d0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	4a66      	ldr	r2, [pc, #408]	; (8001c9c <xTaskResumeAll+0x1d0>)
 8001b02:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b04:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <xTaskResumeAll+0x1d0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 80c0 	bne.w	8001c8e <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b0e:	4b64      	ldr	r3, [pc, #400]	; (8001ca0 <xTaskResumeAll+0x1d4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80bb 	beq.w	8001c8e <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b18:	e08a      	b.n	8001c30 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b1a:	4b62      	ldr	r3, [pc, #392]	; (8001ca4 <xTaskResumeAll+0x1d8>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	6a12      	ldr	r2, [r2, #32]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	69d2      	ldr	r2, [r2, #28]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	3318      	adds	r3, #24
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d103      	bne.n	8001b50 <xTaskResumeAll+0x84>
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2200      	movs	r2, #0
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	1e5a      	subs	r2, r3, #1
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	68d2      	ldr	r2, [r2, #12]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	6892      	ldr	r2, [r2, #8]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d103      	bne.n	8001b8e <xTaskResumeAll+0xc2>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <xTaskResumeAll+0x1dc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	4a3e      	ldr	r2, [pc, #248]	; (8001ca8 <xTaskResumeAll+0x1dc>)
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	493d      	ldr	r1, [pc, #244]	; (8001cac <xTaskResumeAll+0x1e0>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	3204      	adds	r2, #4
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	1d1a      	adds	r2, r3, #4
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <xTaskResumeAll+0x1e0>)
 8001bf4:	441a      	add	r2, r3
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfe:	492b      	ldr	r1, [pc, #172]	; (8001cac <xTaskResumeAll+0x1e0>)
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1c59      	adds	r1, r3, #1
 8001c0e:	4827      	ldr	r0, [pc, #156]	; (8001cac <xTaskResumeAll+0x1e0>)
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4403      	add	r3, r0
 8001c1a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <xTaskResumeAll+0x1e4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <xTaskResumeAll+0x1e8>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <xTaskResumeAll+0x1d8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f47f af70 	bne.w	8001b1a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001c40:	f000 f9ee 	bl	8002020 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <xTaskResumeAll+0x1ec>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d010      	beq.n	8001c72 <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001c50:	f000 f836 	bl	8001cc0 <xTaskIncrementTick>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <xTaskResumeAll+0x1e8>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f1      	bne.n	8001c50 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <xTaskResumeAll+0x1ec>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <xTaskResumeAll+0x1e8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <xTaskResumeAll+0x1f0>)
 8001c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f3bf 8f4f 	dsb	sy
 8001c8a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001c8e:	f000 fa89 	bl	80021a4 <vPortExitCritical>

    return xAlreadyYielded;
 8001c92:	69bb      	ldr	r3, [r7, #24]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000124 	.word	0x20000124
 8001ca0:	20000100 	.word	0x20000100
 8001ca4:	200000c4 	.word	0x200000c4
 8001ca8:	20000108 	.word	0x20000108
 8001cac:	20000030 	.word	0x20000030
 8001cb0:	2000002c 	.word	0x2000002c
 8001cb4:	20000114 	.word	0x20000114
 8001cb8:	20000110 	.word	0x20000110
 8001cbc:	e000ed04 	.word	0xe000ed04

08001cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cca:	4b7d      	ldr	r3, [pc, #500]	; (8001ec0 <xTaskIncrementTick+0x200>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 80eb 	bne.w	8001eaa <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001cd4:	4b7b      	ldr	r3, [pc, #492]	; (8001ec4 <xTaskIncrementTick+0x204>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001cdc:	4a79      	ldr	r2, [pc, #484]	; (8001ec4 <xTaskIncrementTick+0x204>)
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d11f      	bne.n	8001d28 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001ce8:	4b77      	ldr	r3, [pc, #476]	; (8001ec8 <xTaskIncrementTick+0x208>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <xTaskIncrementTick+0x46>
 8001cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	e7fe      	b.n	8001d04 <xTaskIncrementTick+0x44>
 8001d06:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <xTaskIncrementTick+0x208>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <xTaskIncrementTick+0x20c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6d      	ldr	r2, [pc, #436]	; (8001ec8 <xTaskIncrementTick+0x208>)
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4a6d      	ldr	r2, [pc, #436]	; (8001ecc <xTaskIncrementTick+0x20c>)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	; (8001ed0 <xTaskIncrementTick+0x210>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a6b      	ldr	r2, [pc, #428]	; (8001ed0 <xTaskIncrementTick+0x210>)
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	f000 f97c 	bl	8002020 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001d28:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <xTaskIncrementTick+0x214>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	f0c0 80a6 	bcc.w	8001e80 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d34:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <xTaskIncrementTick+0x208>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d104      	bne.n	8001d48 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d3e:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <xTaskIncrementTick+0x214>)
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	601a      	str	r2, [r3, #0]
                    break;
 8001d46:	e09b      	b.n	8001e80 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d48:	4b5f      	ldr	r3, [pc, #380]	; (8001ec8 <xTaskIncrementTick+0x208>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001d58:	6a3a      	ldr	r2, [r7, #32]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d203      	bcs.n	8001d68 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001d60:	4a5c      	ldr	r2, [pc, #368]	; (8001ed4 <xTaskIncrementTick+0x214>)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001d66:	e08b      	b.n	8001e80 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	68d2      	ldr	r2, [r2, #12]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	6892      	ldr	r2, [r2, #8]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d103      	bne.n	8001d96 <xTaskIncrementTick+0xd6>
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	1e5a      	subs	r2, r3, #1
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01e      	beq.n	8001dec <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	6a12      	ldr	r2, [r2, #32]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	69d2      	ldr	r2, [r2, #28]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	3318      	adds	r3, #24
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d103      	bne.n	8001ddc <xTaskIncrementTick+0x11c>
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6a1a      	ldr	r2, [r3, #32]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2200      	movs	r2, #0
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	1e5a      	subs	r2, r3, #1
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	2201      	movs	r2, #1
 8001df2:	409a      	lsls	r2, r3
 8001df4:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <xTaskIncrementTick+0x218>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	4a37      	ldr	r2, [pc, #220]	; (8001ed8 <xTaskIncrementTick+0x218>)
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e02:	4936      	ldr	r1, [pc, #216]	; (8001edc <xTaskIncrementTick+0x21c>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3304      	adds	r3, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	3204      	adds	r2, #4
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	1d1a      	adds	r2, r3, #4
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4a26      	ldr	r2, [pc, #152]	; (8001edc <xTaskIncrementTick+0x21c>)
 8001e42:	441a      	add	r2, r3
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	615a      	str	r2, [r3, #20]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	4923      	ldr	r1, [pc, #140]	; (8001edc <xTaskIncrementTick+0x21c>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1c59      	adds	r1, r3, #1
 8001e5c:	481f      	ldr	r0, [pc, #124]	; (8001edc <xTaskIncrementTick+0x21c>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4403      	add	r3, r0
 8001e68:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <xTaskIncrementTick+0x220>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f67f af5d 	bls.w	8001d34 <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e7e:	e759      	b.n	8001d34 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <xTaskIncrementTick+0x220>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e86:	4915      	ldr	r1, [pc, #84]	; (8001edc <xTaskIncrementTick+0x21c>)
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d901      	bls.n	8001e9c <xTaskIncrementTick+0x1dc>
            {
                xSwitchRequired = pdTRUE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <xTaskIncrementTick+0x224>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	e004      	b.n	8001eb4 <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <xTaskIncrementTick+0x228>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <xTaskIncrementTick+0x228>)
 8001eb2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000124 	.word	0x20000124
 8001ec4:	20000104 	.word	0x20000104
 8001ec8:	200000bc 	.word	0x200000bc
 8001ecc:	200000c0 	.word	0x200000c0
 8001ed0:	20000118 	.word	0x20000118
 8001ed4:	20000120 	.word	0x20000120
 8001ed8:	20000108 	.word	0x20000108
 8001edc:	20000030 	.word	0x20000030
 8001ee0:	2000002c 	.word	0x2000002c
 8001ee4:	20000114 	.word	0x20000114
 8001ee8:	20000110 	.word	0x20000110

08001eec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <vTaskSwitchContext+0xa0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <vTaskSwitchContext+0xa4>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001f00:	e03e      	b.n	8001f80 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8001f02:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <vTaskSwitchContext+0xa4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <vTaskSwitchContext+0xa8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	f1c3 031f 	rsb	r3, r3, #31
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	491e      	ldr	r1, [pc, #120]	; (8001f98 <vTaskSwitchContext+0xac>)
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <vTaskSwitchContext+0x5a>
        __asm volatile
 8001f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	e7fe      	b.n	8001f44 <vTaskSwitchContext+0x58>
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <vTaskSwitchContext+0xac>)
 8001f52:	4413      	add	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	3308      	adds	r3, #8
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d104      	bne.n	8001f76 <vTaskSwitchContext+0x8a>
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <vTaskSwitchContext+0xb0>)
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	20000124 	.word	0x20000124
 8001f90:	20000114 	.word	0x20000114
 8001f94:	20000108 	.word	0x20000108
 8001f98:	20000030 	.word	0x20000030
 8001f9c:	2000002c 	.word	0x2000002c

08001fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	e00c      	b.n	8001fc6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <prvInitialiseTaskLists+0x60>)
 8001fb8:	4413      	add	r3, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fbe2 	bl	8001784 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d9ef      	bls.n	8001fac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <prvInitialiseTaskLists+0x64>)
 8001fce:	f7ff fbd9 	bl	8001784 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <prvInitialiseTaskLists+0x68>)
 8001fd4:	f7ff fbd6 	bl	8001784 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <prvInitialiseTaskLists+0x6c>)
 8001fda:	f7ff fbd3 	bl	8001784 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001fde:	480c      	ldr	r0, [pc, #48]	; (8002010 <prvInitialiseTaskLists+0x70>)
 8001fe0:	f7ff fbd0 	bl	8001784 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001fe4:	480b      	ldr	r0, [pc, #44]	; (8002014 <prvInitialiseTaskLists+0x74>)
 8001fe6:	f7ff fbcd 	bl	8001784 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <prvInitialiseTaskLists+0x78>)
 8001fec:	4a05      	ldr	r2, [pc, #20]	; (8002004 <prvInitialiseTaskLists+0x64>)
 8001fee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <prvInitialiseTaskLists+0x7c>)
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <prvInitialiseTaskLists+0x68>)
 8001ff4:	601a      	str	r2, [r3, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000030 	.word	0x20000030
 8002004:	20000094 	.word	0x20000094
 8002008:	200000a8 	.word	0x200000a8
 800200c:	200000c4 	.word	0x200000c4
 8002010:	200000d8 	.word	0x200000d8
 8002014:	200000ec 	.word	0x200000ec
 8002018:	200000bc 	.word	0x200000bc
 800201c:	200000c0 	.word	0x200000c0

08002020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <prvResetNextTaskUnblockTime+0x30>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d104      	bne.n	8002038 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <prvResetNextTaskUnblockTime+0x34>)
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002036:	e005      	b.n	8002044 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <prvResetNextTaskUnblockTime+0x30>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <prvResetNextTaskUnblockTime+0x34>)
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	200000bc 	.word	0x200000bc
 8002054:	20000120 	.word	0x20000120

08002058 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3b04      	subs	r3, #4
 8002068:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002070:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3b04      	subs	r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f023 0201 	bic.w	r2, r3, #1
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3b04      	subs	r3, #4
 8002086:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <pxPortInitialiseStack+0x64>)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3b14      	subs	r3, #20
 8002092:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3b04      	subs	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f06f 0202 	mvn.w	r2, #2
 80020a6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3b20      	subs	r3, #32
 80020ac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	080020c1 	.word	0x080020c1

080020c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <prvTaskExitError+0x50>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d2:	d009      	beq.n	80020e8 <prvTaskExitError+0x28>
 80020d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d8:	f383 8811 	msr	BASEPRI, r3
 80020dc:	f3bf 8f6f 	isb	sy
 80020e0:	f3bf 8f4f 	dsb	sy
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	e7fe      	b.n	80020e6 <prvTaskExitError+0x26>
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80020fa:	bf00      	nop
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0fc      	beq.n	80020fc <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	2000000c 	.word	0x2000000c
	...

08002120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <pxCurrentTCBConst2>)
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	6808      	ldr	r0, [r1, #0]
 8002126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800212a:	f380 8809 	msr	PSP, r0
 800212e:	f3bf 8f6f 	isb	sy
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	f380 8811 	msr	BASEPRI, r0
 800213a:	4770      	bx	lr
 800213c:	f3af 8000 	nop.w

08002140 <pxCurrentTCBConst2>:
 8002140:	2000002c 	.word	0x2000002c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop

08002148 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002152:	f383 8811 	msr	BASEPRI, r3
 8002156:	f3bf 8f6f 	isb	sy
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <vPortEnterCritical+0x54>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	4a0d      	ldr	r2, [pc, #52]	; (800219c <vPortEnterCritical+0x54>)
 8002168:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <vPortEnterCritical+0x54>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d10e      	bne.n	8002190 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <vPortEnterCritical+0x58>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <vPortEnterCritical+0x48>
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	e7fe      	b.n	800218e <vPortEnterCritical+0x46>
    }
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	2000000c 	.word	0x2000000c
 80021a0:	e000ed04 	.word	0xe000ed04

080021a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <vPortExitCritical+0x4c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <vPortExitCritical+0x22>
 80021b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b6:	f383 8811 	msr	BASEPRI, r3
 80021ba:	f3bf 8f6f 	isb	sy
 80021be:	f3bf 8f4f 	dsb	sy
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	e7fe      	b.n	80021c4 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <vPortExitCritical+0x4c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <vPortExitCritical+0x4c>)
 80021ce:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <vPortExitCritical+0x4c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d104      	bne.n	80021e2 <vPortExitCritical+0x3e>
 80021d8:	2300      	movs	r3, #0
 80021da:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	2000000c 	.word	0x2000000c
	...

08002200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002200:	f3ef 8009 	mrs	r0, PSP
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <pxCurrentTCBConst>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	f01e 0f10 	tst.w	lr, #16
 8002210:	bf08      	it	eq
 8002212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800221a:	6010      	str	r0, [r2, #0]
 800221c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002224:	f380 8811 	msr	BASEPRI, r0
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f7ff fe5c 	bl	8001eec <vTaskSwitchContext>
 8002234:	f04f 0000 	mov.w	r0, #0
 8002238:	f380 8811 	msr	BASEPRI, r0
 800223c:	bc09      	pop	{r0, r3}
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	6808      	ldr	r0, [r1, #0]
 8002242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002246:	f01e 0f10 	tst.w	lr, #16
 800224a:	bf08      	it	eq
 800224c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002250:	f380 8809 	msr	PSP, r0
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	f3af 8000 	nop.w

08002260 <pxCurrentTCBConst>:
 8002260:	2000002c 	.word	0x2000002c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop

08002268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
        __asm volatile
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002280:	f7ff fd1e 	bl	8001cc0 <xTaskIncrementTick>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SysTick_Handler+0x3c>)
 800228c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	e000ed04 	.word	0xe000ed04

080022a8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80022b4:	f7ff fbfc 	bl	8001ab0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80022b8:	4b52      	ldr	r3, [pc, #328]	; (8002404 <pvPortMalloc+0x15c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80022c0:	f000 f904 	bl	80024cc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80022ca:	2208      	movs	r2, #8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	3308      	adds	r3, #8
 80022d6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	43db      	mvns	r3, r3
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d804      	bhi.n	80022ec <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	4413      	add	r3, r2
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	e001      	b.n	80022f0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db6f      	blt.n	80023d6 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d06c      	beq.n	80023d6 <pvPortMalloc+0x12e>
 80022fc:	4b42      	ldr	r3, [pc, #264]	; (8002408 <pvPortMalloc+0x160>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d867      	bhi.n	80023d6 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002306:	4b41      	ldr	r3, [pc, #260]	; (800240c <pvPortMalloc+0x164>)
 8002308:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800230a:	4b40      	ldr	r3, [pc, #256]	; (800240c <pvPortMalloc+0x164>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002310:	e004      	b.n	800231c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d903      	bls.n	800232e <pvPortMalloc+0x86>
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f1      	bne.n	8002312 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800232e:	4b35      	ldr	r3, [pc, #212]	; (8002404 <pvPortMalloc+0x15c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	429a      	cmp	r2, r3
 8002336:	d04e      	beq.n	80023d6 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2208      	movs	r2, #8
 800233e:	4413      	add	r3, r2
 8002340:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	1ad2      	subs	r2, r2, r3
 8002352:	2308      	movs	r3, #8
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	429a      	cmp	r2, r3
 8002358:	d91e      	bls.n	8002398 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	2b00      	cmp	r3, #0
 800236a:	d009      	beq.n	8002380 <pvPortMalloc+0xd8>
        __asm volatile
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	e7fe      	b.n	800237e <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	1ad2      	subs	r2, r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f000 f8f6 	bl	8002584 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <pvPortMalloc+0x160>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	4a19      	ldr	r2, [pc, #100]	; (8002408 <pvPortMalloc+0x160>)
 80023a4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <pvPortMalloc+0x160>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b19      	ldr	r3, [pc, #100]	; (8002410 <pvPortMalloc+0x168>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d203      	bcs.n	80023ba <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <pvPortMalloc+0x160>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a16      	ldr	r2, [pc, #88]	; (8002410 <pvPortMalloc+0x168>)
 80023b8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <pvPortMalloc+0x16c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	4a10      	ldr	r2, [pc, #64]	; (8002414 <pvPortMalloc+0x16c>)
 80023d4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80023d6:	f7ff fb79 	bl	8001acc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <pvPortMalloc+0x150>
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e7fe      	b.n	80023f6 <pvPortMalloc+0x14e>
    return pvReturn;
 80023f8:	69fb      	ldr	r3, [r7, #28]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20012d30 	.word	0x20012d30
 8002408:	20012d34 	.word	0x20012d34
 800240c:	20012d28 	.word	0x20012d28
 8002410:	20012d38 	.word	0x20012d38
 8002414:	20012d3c 	.word	0x20012d3c

08002418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d047      	beq.n	80024ba <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800242a:	2308      	movs	r3, #8
 800242c:	425b      	negs	r3, r3
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4413      	add	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db09      	blt.n	8002454 <vPortFree+0x3c>
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e7fe      	b.n	8002452 <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <vPortFree+0x58>
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	e7fe      	b.n	800246e <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	0fdb      	lsrs	r3, r3, #31
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01c      	beq.n	80024ba <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d118      	bne.n	80024ba <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002494:	f7ff fb0c 	bl	8001ab0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <vPortFree+0xac>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <vPortFree+0xac>)
 80024a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024a6:	6938      	ldr	r0, [r7, #16]
 80024a8:	f000 f86c 	bl	8002584 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <vPortFree+0xb0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <vPortFree+0xb0>)
 80024b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80024b6:	f7ff fb09 	bl	8001acc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20012d34 	.word	0x20012d34
 80024c8:	20012d40 	.word	0x20012d40

080024cc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80024d2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80024d6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <prvHeapInit+0xa4>)
 80024da:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00c      	beq.n	8002500 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3307      	adds	r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0307 	bic.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <prvHeapInit+0xa4>)
 80024fc:	4413      	add	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002504:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <prvHeapInit+0xa8>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <prvHeapInit+0xa8>)
 800250c:	2200      	movs	r2, #0
 800250e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4413      	add	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002518:	2208      	movs	r2, #8
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0307 	bic.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a13      	ldr	r2, [pc, #76]	; (8002578 <prvHeapInit+0xac>)
 800252c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <prvHeapInit+0xac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <prvHeapInit+0xac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	1ad2      	subs	r2, r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <prvHeapInit+0xac>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a08      	ldr	r2, [pc, #32]	; (800257c <prvHeapInit+0xb0>)
 800255a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <prvHeapInit+0xb4>)
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	20000128 	.word	0x20000128
 8002574:	20012d28 	.word	0x20012d28
 8002578:	20012d30 	.word	0x20012d30
 800257c:	20012d38 	.word	0x20012d38
 8002580:	20012d34 	.word	0x20012d34

08002584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <prvInsertBlockIntoFreeList+0xac>)
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e002      	b.n	8002598 <prvInsertBlockIntoFreeList+0x14>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d8f7      	bhi.n	8002592 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	4413      	add	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d108      	bne.n	80025c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	441a      	add	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	441a      	add	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d118      	bne.n	800260c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <prvInsertBlockIntoFreeList+0xb0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d00d      	beq.n	8002602 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e008      	b.n	8002614 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <prvInsertBlockIntoFreeList+0xb0>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e003      	b.n	8002614 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	d002      	beq.n	8002622 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20012d28 	.word	0x20012d28
 8002634:	20012d30 	.word	0x20012d30

08002638 <__libc_init_array>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	4e0d      	ldr	r6, [pc, #52]	; (8002670 <__libc_init_array+0x38>)
 800263c:	4c0d      	ldr	r4, [pc, #52]	; (8002674 <__libc_init_array+0x3c>)
 800263e:	1ba4      	subs	r4, r4, r6
 8002640:	10a4      	asrs	r4, r4, #2
 8002642:	2500      	movs	r5, #0
 8002644:	42a5      	cmp	r5, r4
 8002646:	d109      	bne.n	800265c <__libc_init_array+0x24>
 8002648:	4e0b      	ldr	r6, [pc, #44]	; (8002678 <__libc_init_array+0x40>)
 800264a:	4c0c      	ldr	r4, [pc, #48]	; (800267c <__libc_init_array+0x44>)
 800264c:	f000 f820 	bl	8002690 <_init>
 8002650:	1ba4      	subs	r4, r4, r6
 8002652:	10a4      	asrs	r4, r4, #2
 8002654:	2500      	movs	r5, #0
 8002656:	42a5      	cmp	r5, r4
 8002658:	d105      	bne.n	8002666 <__libc_init_array+0x2e>
 800265a:	bd70      	pop	{r4, r5, r6, pc}
 800265c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002660:	4798      	blx	r3
 8002662:	3501      	adds	r5, #1
 8002664:	e7ee      	b.n	8002644 <__libc_init_array+0xc>
 8002666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800266a:	4798      	blx	r3
 800266c:	3501      	adds	r5, #1
 800266e:	e7f2      	b.n	8002656 <__libc_init_array+0x1e>
 8002670:	08002700 	.word	0x08002700
 8002674:	08002700 	.word	0x08002700
 8002678:	08002700 	.word	0x08002700
 800267c:	08002704 	.word	0x08002704

08002680 <memset>:
 8002680:	4402      	add	r2, r0
 8002682:	4603      	mov	r3, r0
 8002684:	4293      	cmp	r3, r2
 8002686:	d100      	bne.n	800268a <memset+0xa>
 8002688:	4770      	bx	lr
 800268a:	f803 1b01 	strb.w	r1, [r3], #1
 800268e:	e7f9      	b.n	8002684 <memset+0x4>

08002690 <_init>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr

0800269c <_fini>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	bf00      	nop
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr
